import fasttext  # type: ignore
import re
import requests     # type: ignore
from datetime import datetime, timezone, timedelta
from typing import Optional
from flask import Flask, request, jsonify
from dateutil import parser # type: ignore
from dateutil import parser, tz  # type: ignore

app = Flask(__name__)

keys_list = []
patterns_list = []

# Load model
model = fasttext.load_model('models/intent_model.bin')
DUCKLING_URL = "http://localhost:8085/parse"
VI_LOCALE = "vi_VN"
TZ = timezone(timedelta(hours=7))  # Asia/Ho_Chi_Minh


# =============================
# ‚úÖ x·ª≠ l√Ω - / trong date
# =============================
import re

def preprocess_date_text(text: str) -> str:
    """
    Chu·∫©n ho√° chu·ªói ng√†y th√°ng ng∆∞·ªùi d√πng nh·∫≠p ƒë·ªÉ Duckling hi·ªÉu.
    - Nh·∫≠n bi·∫øt d·∫•u '-', '/', '.'
    - Chu·∫©n ho√° 'thang' -> 'th√°ng'
    - Th√™m s·ªë 0 cho ng√†y/th√°ng 1 ch·ªØ s·ªë
    - X·ª≠ l√Ω t·ªët c√°c ƒë·ªãnh d·∫°ng nh∆∞: '1-10', '1/10/2025', 'thang 1', 'thang 10 nam 2025'
    """
    text = text.lower().strip()

    # s·ª≠a l·ªói kh√¥ng d·∫•u: "thang" -> "th√°ng", "nam" -> "nƒÉm"
    text = re.sub(r"\bthang\b", "th√°ng", text)
    text = re.sub(r"\bnam\b", "nƒÉm", text)

    # Chu·∫©n ho√° d·∫•u ph√¢n c√°ch v·ªÅ "/"
    text = re.sub(r"[-\.]", "/", text)

    # Xo√° kho·∫£ng tr·∫Øng quanh "/"
    text = re.sub(r"\s*/\s*", "/", text)

    # Th√™m s·ªë 0 cho ng√†y/th√°ng ng·∫Øn
    def pad_date_part(match):
        parts = match.group().split('/')
        parts = [p.zfill(2) if p.isdigit() else p for p in parts]
        return "/".join(parts)

    # X·ª≠ l√Ω d·∫°ng 2-2021, 2/2021 ‚Üí th√°ng 2 nƒÉm 2021
    text = re.sub(r'\b(\d{1,2})[/-](\d{2,4})\b', r'th√°ng \1 nƒÉm \2', text)

    # X·ª≠ l√Ω d·∫°ng vi·∫øt t·∫Øt ‚Äút2-21‚Äù ho·∫∑c ‚Äút2/21‚Äù ‚Üí ‚Äúth√°ng 2 nƒÉm 2021‚Äù
    text = re.sub(r'\bt\s*0*(\d{1,2})[/-](\d{2})\b', r'th√°ng \1 nƒÉm 20\2', text)

    return text



# =============================
# ‚úÖ H√†m chuy·ªÉn m√∫i gi·ªù (ƒë√£ fix)
# =============================
def to_vn_timezone(dt_str: str):
    """Chuy·ªÉn ISO datetime string v·ªÅ m√∫i gi·ªù Vi·ªát Nam (UTC+7).
    T·ª± ƒë·ªông +1 ng√†y n·∫øu Duckling tr·∫£ v·ªÅ gi·ªù l√πi (vd: -07:00 ‚Üí +07:00).
    """
    try:
        dt = parser.isoparse(dt_str)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)

        vn_tz = tz.gettz("Asia/Ho_Chi_Minh")
        vn_time = dt.astimezone(vn_tz)

        # T√≠nh ch√™nh l·ªách gi·ªù th·ª±c t·∫ø gi·ªØa VN v√† g·ªëc Duckling
        diff_hours = (vn_tz.utcoffset(dt) - dt.utcoffset()).total_seconds() / 3600

        # N·∫øu l·ªách qu√° 8 ti·∫øng (vd. -07:00 ‚Üí +07:00)
        if diff_hours > 8:
            vn_time += timedelta(days=1)
            vn_time = vn_time.replace(hour=0, minute=0, second=0, microsecond=0)

        return vn_time
    except Exception as e:
        print(f"‚ö†Ô∏è to_vn_timezone error: {e}")
        return parser.isoparse(dt_str)


# =============================
# G·ªçi Duckling
# =============================
def duckling_parse_time(text: str, ref_time: Optional[datetime] = None):
    text = preprocess_date_text(text)
    """G·ªçi Duckling server ƒë·ªÉ parse ng√†y/gi·ªù."""
    if ref_time is None:
        ref_time = datetime.now(TZ)
    print("Duckling ƒëang x·ª≠ l√≠")
    reftime_ms = int(ref_time.timestamp() * 1000)

    data = {
        "locale": VI_LOCALE,
        "text": text,
        "dims": '["time"]',
        "reftime": str(reftime_ms),
    }
    try:
        r = requests.post(
            DUCKLING_URL,
            data=data,
            headers={"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"},
            timeout=5
        )
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print("‚ö†Ô∏è Duckling error:", e)
        return []


# =============================
# C√°c h√†m h·ªó tr·ª£ x·ª≠ l√Ω th·ªùi gian
# =============================
def _iso_to_dt(s: str) -> datetime:
    s = s.replace('Z', '+00:00')
    return datetime.fromisoformat(s)

def _to_iso(dt: datetime) -> str:
    return dt.isoformat()

def _add_months(dt: datetime, months: int) -> datetime:
    y = dt.year + (dt.month - 1 + months) // 12
    m = (dt.month - 1 + months) % 12 + 1
    return dt.replace(year=y, month=m, day=1, hour=0, minute=0, second=0, microsecond=0)

def _end_of_month(dt: datetime) -> datetime:
    first_next = _add_months(dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0), 1)
    return first_next - timedelta(seconds=1)


# =============================
# M·ªü r·ªông kho·∫£ng th·ªùi gian
# =============================
def _expand_grain_interval(val_iso: str, grain: str, inclusive_end: bool = True, tz: timezone = TZ):
    base = to_vn_timezone(val_iso)

    # N·∫øu gi·ªù Vi·ªát Nam < 3h s√°ng ‚Üí Duckling t√≠nh ng√†y h√¥m tr∆∞·ªõc ‚Üí c·ªông 1 ng√†y
    if base.hour < 3:
        base = base + timedelta(days=1)

    if grain == "day":
        start = base.replace(hour=0, minute=0, second=0, microsecond=0)
        end = start + timedelta(days=1)
        if inclusive_end:
            end = end - timedelta(seconds=1)
        return _to_iso(start), _to_iso(end)

    if grain == "week":
        start = base.replace(hour=0, minute=0, second=0, microsecond=0)
        end = start + timedelta(days=7)
        if inclusive_end:
            end = end - timedelta(seconds=1)
        return _to_iso(start), _to_iso(end)

    if grain == "month":
        start = base.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        if inclusive_end:
            end_dt = _end_of_month(start)
        else:
            end_dt = _add_months(start, 1)
        return _to_iso(start), _to_iso(end_dt)

    if grain == "quarter":
        q = (base.month - 1) // 3
        start_month = q * 3 + 1
        start = base.replace(month=start_month, day=1, hour=0, minute=0, second=0, microsecond=0)
        if inclusive_end:
            end_dt = _add_months(start, 3) - timedelta(seconds=1)
        else:
            end_dt = _add_months(start, 3)
        return _to_iso(start), _to_iso(end_dt)

    if grain == "year":
        start = base.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
        if inclusive_end:
            end_dt = start.replace(year=start.year + 1) - timedelta(seconds=1)
        else:
            end_dt = start.replace(year=start.year + 1)
        return _to_iso(start), _to_iso(end_dt)

    return val_iso, val_iso


# =============================
# Chu·∫©n h√≥a d·ªØ li·ªáu t·ª´ Duckling
# =============================
def normalize_duckling_times(resp: list, inclusive_end: bool = True, tz: timezone = TZ):
    if not resp:
        return {"type": "none"}

    # N·∫øu Duckling tr·∫£ v·ªÅ nhi·ªÅu m·ªëc th·ªùi gian (v√≠ d·ª•: t·ª´ ng√†y... ƒë·∫øn ng√†y...)
    if len(resp) >= 2:
        try:
            first_item = resp[0]
            last_item = resp[-1]
            first_val = first_item.get("value", {}).get("value")
            last_val = last_item.get("value", {}).get("value")
            first_grain = first_item.get("value", {}).get("grain", "day")
            last_grain = last_item.get("value", {}).get("grain", "day")

            if first_val and last_val:
                start, _ = _expand_grain_interval(first_val, first_grain, inclusive_end=False, tz=tz)
                _, end = _expand_grain_interval(last_val, last_grain, inclusive_end=True, tz=tz)
                return {"type": "range", "start": start, "end": end, "grain": last_grain}
        except Exception as e:
            print("‚ö†Ô∏è Multi-time normalize error:", e)

    # Ch·ªçn item "time" ch√≠nh
    item = next((x for x in resp if x.get("dim") == "time"), resp[0])
    primary = None
    top_values = item.get("values")
    top_value = item.get("value")

    if isinstance(top_values, list) and top_values:
        primary = top_values[0]
    elif isinstance(top_value, dict):
        if isinstance(top_value.get("values"), list) and top_value["values"]:
            primary = top_value["values"][0]
        else:
            primary = top_value

    if not isinstance(primary, dict):
        return {"type": "none"}

    typ = primary.get("type")
    grain = primary.get("grain")

    # üïí D√πng h√†m to_vn_timezone ƒë√£ fix
    if typ == "interval":
        start_iso = primary.get("from", {}).get("value")
        end_iso = primary.get("to", {}).get("value")

        if start_iso:
            start_iso = to_vn_timezone(start_iso).isoformat()
        if end_iso:
            end_iso = to_vn_timezone(end_iso).isoformat()

        if inclusive_end and end_iso:
            end_grain = primary.get("to", {}).get("grain") or grain or "day"
            if end_grain in ("day", "week", "month", "quarter", "year"):
                _s, end_iso = _expand_grain_interval(end_iso, end_grain, inclusive_end=True, tz=tz)

        return {"type": "range", "start": start_iso, "end": end_iso}

    if typ == "value":
        val_iso = primary.get("value")
        vn_dt = to_vn_timezone(val_iso)
        # Gi√∫p c√°c c√¢u nh∆∞ "xem l∆∞∆°ng th√°ng 3" ‚Üí hi·ªÉu l√† th√°ng 3 nƒÉm 2025
        try:
            if not re.search(r'\b20\d{2}\b', item.get("body", "")):
                now = datetime.now(TZ)
                vn_dt = vn_dt.replace(year=now.year)
        except Exception as e:
            print("‚ö†Ô∏è Year defaulting error:", e)

        val_iso = vn_dt.isoformat()

        if grain in ("week", "month", "quarter", "year"):
            start, end = _expand_grain_interval(val_iso, grain, inclusive_end=inclusive_end, tz=tz)
            return {"type": "range", "start": start, "end": end, "grain": grain}
        return {"type": "single", "date": val_iso, "grain": grain}

    return {"type": "none"}



# =============================
# Intent handling (gi·ªØ nguy√™n)
# =============================
def build_response_with_time(text: str):
    intent, confidence = predict_intent(text)

    time_info = {"type": "none"}
    # N·∫øu intent li√™n quan th·ªùi gian th√¨ g·ªçi Duckling
    if "NGAY" in intent:
        duck_resp = duckling_parse_time(text)
        print(duck_resp)
        time_info = normalize_duckling_times(duck_resp)

    action_text = get_action(intent, text)
    return {"intent": intent, "confidence": confidence, "time": time_info, "message": action_text}


def predict_intent(text):
    try:
        predictions = model.predict(text, k=1)
        intent = predictions[0][0].replace('__label__', '')
        confidence = predictions[1][0]
        return intent, confidence
    except Exception:
        return "UNKNOWN", 0.0


# =============================
# N·ªôi dung ph·∫£n h·ªìi ng∆∞·ªùi d√πng
# =============================
def get_action(intent: str, text: str = ""):
    """
    L·∫•y d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ listkey (ƒë√£ l·∫•y t·ª´ DB)
    intent = DATA_KEY
    pattern = DATA_NAME
    response = DATA_GROUP
    """
    try:
        for item in listkey:
            if item["DATA_KEY"] == intent:
                data_name = item.get("DATA_NAME", "")
                data_group = item.get("DATA_GROUP", "")
                # Tr·∫£ v·ªÅ n·ªôi dung b·∫°n mu·ªën (·ªü ƒë√¢y b·∫°n n√≥i response = DATA_GROUP)
                return f"{data_name} ‚Üí nh√≥m d·ªØ li·ªáu: {data_group}"
    except Exception as e:
        print("‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω get_action:", e)

    return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. H√£y th·ª≠ l·∫°i nh√©! üòä"


# Demo
@app.after_request
def add_cors_headers(response):
    response.headers["Access-Control-Allow-Origin"] = "*"   # ho·∫∑c domain c·ª• th·ªÉ
    response.headers["Access-Control-Allow-Methods"] = "GET,POST,PUT,DELETE,OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "Content-Type,Authorization"
    return response

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    text = data.get('text', '')
    
    res = build_response_with_time(text)
    
    return jsonify(res)

@app.route('/pushKey', methods=['POST'])
def push_key():
    try:
        data = request.get_json()  # nh·∫≠n JSON t·ª´ frontend
        key = data.get('key')
        pattern = data.get('pattern')

        if not key or not pattern:
            return jsonify({"error": "Thi·∫øu key ho·∫∑c pattern"}), 400

        # ƒê·ªï d·ªØ li·ªáu v√†o 2 m·∫£ng Python
        keys_list.append(key)
        patterns_list.append(pattern)

        print(f"üì• Nh·∫≠n key: {key}")
        print(f"üì• Nh·∫≠n pattern: {pattern}")
        print(f"üì¶ T·∫•t c·∫£ keys hi·ªán t·∫°i: {keys_list}")
        print(f"üì¶ T·∫•t c·∫£ patterns hi·ªán t·∫°i: {patterns_list}")

        return jsonify({
            "message": "ƒê√£ nh·∫≠n d·ªØ li·ªáu th√†nh c√¥ng!",
            "keys": keys_list,
            "patterns": patterns_list
        }), 200

    except Exception as e:
        print("‚ùå L·ªói:", e)
        return jsonify({"error": str(e)}), 500



@app.route('/getKeys', methods=['GET'])
def get_keys():
    """
    Tr·∫£ v·ªÅ danh s√°ch keys v√† patterns hi·ªán c√≥.
    """
    try:
        return jsonify({
            "keys": keys_list,
            "patterns": patterns_list
        }), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    app.run(debug=True, port=5000)