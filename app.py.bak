import fasttext  # type: ignore
import re
import requests
from datetime import datetime, timezone, timedelta
from typing import Optional
from dateutil import parser, tz  # type: ignore
import dateutil  # type: ignore

# Load model
model = fasttext.load_model('models/intent_model.bin')
DUCKLING_URL = "http://localhost:8085/parse"
VI_LOCALE = "vi_VN"
TZ = timezone(timedelta(hours=7))  # Asia/Ho_Chi_Minh


# =============================
# ‚úÖ x·ª≠ l√Ω - / trong date
# =============================

def preprocess_date_text(text: str) -> str:
    """
    Chu·∫©n ho√° chu·ªói ng√†y th√°ng ng∆∞·ªùi d√πng nh·∫≠p ƒë·ªÉ Duckling hi·ªÉu.
    - Nh·∫≠n bi·∫øt d·∫•u '-', '/', '.'
    - Chu·∫©n ho√° 'thang' -> 'th√°ng'
    - Th√™m s·ªë 0 cho ng√†y/th√°ng 1 ch·ªØ s·ªë
    - X·ª≠ l√Ω t·ªët c√°c ƒë·ªãnh d·∫°ng nh∆∞: '1-10', '1/10/2025', 'thang 1', 'thang 10 nam 2025'
    """
    text = text.lower().strip()

    # s·ª≠a l·ªói kh√¥ng d·∫•u: "thang" -> "th√°ng", "nam" -> "nƒÉm"
    text = re.sub(r"\bthang\b", "th√°ng", text)
    text = re.sub(r"\bnam\b", "nƒÉm", text)

    # Chu·∫©n ho√° d·∫•u ph√¢n c√°ch v·ªÅ "/"
    text = re.sub(r"[-\.]", "/", text)

    # Xo√° kho·∫£ng tr·∫Øng quanh "/"
    text = re.sub(r"\s*/\s*", "/", text)

    # Th√™m s·ªë 0 cho ng√†y/th√°ng ng·∫Øn
    def pad_date_part(match):
        parts = match.group().split('/')
        parts = [p.zfill(2) if p.isdigit() else p for p in parts]
        return "/".join(parts)

    # X·ª≠ l√Ω d·∫°ng 2-2021, 2/2021 ‚Üí th√°ng 2 nƒÉm 2021
    text = re.sub(r'\b(\d{1,2})[/-](\d{2,4})\b', r'th√°ng \1 nƒÉm \2', text)

    # X·ª≠ l√Ω d·∫°ng vi·∫øt t·∫Øt ‚Äút2-21‚Äù ho·∫∑c ‚Äút2/21‚Äù ‚Üí ‚Äúth√°ng 2 nƒÉm 2021‚Äù
    text = re.sub(r'\bt\s*0*(\d{1,2})[/-](\d{2})\b', r'th√°ng \1 nƒÉm 20\2', text)

    return text




# =============================
# ‚úÖ H√†m chuy·ªÉn m√∫i gi·ªù (ƒë√£ fix)
# =============================
def to_vn_timezone(dt_str: str):
    """Chuy·ªÉn ISO datetime string v·ªÅ m√∫i gi·ªù Vi·ªát Nam (UTC+7).
    T·ª± ƒë·ªông +1 ng√†y n·∫øu Duckling tr·∫£ v·ªÅ gi·ªù l√πi (vd: -07:00 ‚Üí +07:00).
    """
    try:
        dt = parser.isoparse(dt_str)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)

        vn_tz = tz.gettz("Asia/Ho_Chi_Minh")
        vn_time = dt.astimezone(vn_tz)

        # T√≠nh ch√™nh l·ªách gi·ªù th·ª±c t·∫ø gi·ªØa VN v√† g·ªëc Duckling
        diff_hours = (vn_tz.utcoffset(dt) - dt.utcoffset()).total_seconds() / 3600

        # N·∫øu l·ªách qu√° 8 ti·∫øng (vd. -07:00 ‚Üí +07:00)
        if diff_hours > 8:
            vn_time += timedelta(days=1)
            vn_time = vn_time.replace(hour=0, minute=0, second=0, microsecond=0)

        return vn_time
    except Exception as e:
        print(f"‚ö†Ô∏è to_vn_timezone error: {e}")
        return parser.isoparse(dt_str)


# =============================
# G·ªçi Duckling
# =============================
def duckling_parse_time(text: str, ref_time: Optional[datetime] = None):
    text = preprocess_date_text(text)
    """G·ªçi Duckling server ƒë·ªÉ parse ng√†y/gi·ªù."""
    if ref_time is None:
        ref_time = datetime.now(TZ)
    print("Duckling ƒëang x·ª≠ l√≠")
    reftime_ms = int(ref_time.timestamp() * 1000)

    data = {
        "locale": VI_LOCALE,
        "text": text,
        "dims": '["time"]',
        "reftime": str(reftime_ms),
    }
    try:
        r = requests.post(
            DUCKLING_URL,
            data=data,
            headers={"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"},
            timeout=5
        )
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print("‚ö†Ô∏è Duckling error:", e)
        return []


# =============================
# C√°c h√†m h·ªó tr·ª£ x·ª≠ l√Ω th·ªùi gian
# =============================
def _iso_to_dt(s: str) -> datetime:
    s = s.replace('Z', '+00:00')
    return datetime.fromisoformat(s)

def _to_iso(dt: datetime) -> str:
    return dt.isoformat()

def _add_months(dt: datetime, months: int) -> datetime:
    y = dt.year + (dt.month - 1 + months) // 12
    m = (dt.month - 1 + months) % 12 + 1
    return dt.replace(year=y, month=m, day=1, hour=0, minute=0, second=0, microsecond=0)

def _end_of_month(dt: datetime) -> datetime:
    first_next = _add_months(dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0), 1)
    return first_next - timedelta(seconds=1)


# =============================
# M·ªü r·ªông kho·∫£ng th·ªùi gian
# =============================
def _expand_grain_interval(val_iso: str, grain: str, inclusive_end: bool = True, tz: timezone = TZ):
    base = to_vn_timezone(val_iso)

    # N·∫øu gi·ªù Vi·ªát Nam < 3h s√°ng ‚Üí Duckling t√≠nh ng√†y h√¥m tr∆∞·ªõc ‚Üí c·ªông 1 ng√†y
    if base.hour < 3:
        base = base + timedelta(days=1)

    if grain == "day":
        start = base.replace(hour=0, minute=0, second=0, microsecond=0)
        end = start + timedelta(days=1)
        if inclusive_end:
            end = end - timedelta(seconds=1)
        return _to_iso(start), _to_iso(end)

    if grain == "week":
        start = base.replace(hour=0, minute=0, second=0, microsecond=0)
        end = start + timedelta(days=7)
        if inclusive_end:
            end = end - timedelta(seconds=1)
        return _to_iso(start), _to_iso(end)

    if grain == "month":
        start = base.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        if inclusive_end:
            end_dt = _end_of_month(start)
        else:
            end_dt = _add_months(start, 1)
        return _to_iso(start), _to_iso(end_dt)

    if grain == "quarter":
        q = (base.month - 1) // 3
        start_month = q * 3 + 1
        start = base.replace(month=start_month, day=1, hour=0, minute=0, second=0, microsecond=0)
        if inclusive_end:
            end_dt = _add_months(start, 3) - timedelta(seconds=1)
        else:
            end_dt = _add_months(start, 3)
        return _to_iso(start), _to_iso(end_dt)

    if grain == "year":
        start = base.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
        if inclusive_end:
            end_dt = start.replace(year=start.year + 1) - timedelta(seconds=1)
        else:
            end_dt = start.replace(year=start.year + 1)
        return _to_iso(start), _to_iso(end_dt)

    return val_iso, val_iso


# =============================
# Chu·∫©n h√≥a d·ªØ li·ªáu t·ª´ Duckling
# =============================
def normalize_duckling_times(resp: list, inclusive_end: bool = True, tz: timezone = TZ):
    if not resp:
        return {"type": "none"}

    # N·∫øu Duckling tr·∫£ v·ªÅ nhi·ªÅu m·ªëc th·ªùi gian (v√≠ d·ª•: t·ª´ ng√†y... ƒë·∫øn ng√†y...)
    if len(resp) >= 2:
        try:
            first_item = resp[0]
            last_item = resp[-1]
            first_val = first_item.get("value", {}).get("value")
            last_val = last_item.get("value", {}).get("value")
            first_grain = first_item.get("value", {}).get("grain", "day")
            last_grain = last_item.get("value", {}).get("grain", "day")

            if first_val and last_val:
                start, _ = _expand_grain_interval(first_val, first_grain, inclusive_end=False, tz=tz)
                _, end = _expand_grain_interval(last_val, last_grain, inclusive_end=True, tz=tz)
                return {"type": "range", "start": start, "end": end, "grain": last_grain}
        except Exception as e:
            print("‚ö†Ô∏è Multi-time normalize error:", e)

    # Ch·ªçn item "time" ch√≠nh
    item = next((x for x in resp if x.get("dim") == "time"), resp[0])
    primary = None
    top_values = item.get("values")
    top_value = item.get("value")

    if isinstance(top_values, list) and top_values:
        primary = top_values[0]
    elif isinstance(top_value, dict):
        if isinstance(top_value.get("values"), list) and top_value["values"]:
            primary = top_value["values"][0]
        else:
            primary = top_value

    if not isinstance(primary, dict):
        return {"type": "none"}

    typ = primary.get("type")
    grain = primary.get("grain")

    # üïí D√πng h√†m to_vn_timezone ƒë√£ fix
    if typ == "interval":
        start_iso = primary.get("from", {}).get("value")
        end_iso = primary.get("to", {}).get("value")

        if start_iso:
            start_iso = to_vn_timezone(start_iso).isoformat()
        if end_iso:
            end_iso = to_vn_timezone(end_iso).isoformat()

        if inclusive_end and end_iso:
            end_grain = primary.get("to", {}).get("grain") or grain or "day"
            if end_grain in ("day", "week", "month", "quarter", "year"):
                _s, end_iso = _expand_grain_interval(end_iso, end_grain, inclusive_end=True, tz=tz)

        return {"type": "range", "start": start_iso, "end": end_iso}

    if typ == "value":
        val_iso = primary.get("value")
        vn_dt = to_vn_timezone(val_iso)
        # Gi√∫p c√°c c√¢u nh∆∞ "xem l∆∞∆°ng th√°ng 3" ‚Üí hi·ªÉu l√† th√°ng 3 nƒÉm 2025
        try:
            if not re.search(r'\b20\d{2}\b', item.get("body", "")):
                now = datetime.now(TZ)
                vn_dt = vn_dt.replace(year=now.year)
        except Exception as e:
            print("‚ö†Ô∏è Year defaulting error:", e)

        val_iso = vn_dt.isoformat()

        if grain in ("week", "month", "quarter", "year"):
            start, end = _expand_grain_interval(val_iso, grain, inclusive_end=inclusive_end, tz=tz)
            return {"type": "range", "start": start, "end": end, "grain": grain}
        return {"type": "single", "date": val_iso, "grain": grain}

    return {"type": "none"}



# =============================
# Intent handling (gi·ªØ nguy√™n)
# =============================
def build_response_with_time(text: str):
    intent, confidence = predict_intent(text)

    time_info = {"type": "none"}
    # N·∫øu intent li√™n quan th·ªùi gian th√¨ g·ªçi Duckling
    if "NGAY" in intent:
        duck_resp = duckling_parse_time(text)
        print(duck_resp)
        time_info = normalize_duckling_times(duck_resp)

    action_text = get_action(intent, text)
    return {"intent": intent, "confidence": confidence, "time": time_info, "message": action_text}


def predict_intent(text):
    try:
        predictions = model.predict(text, k=1)
        intent = predictions[0][0].replace('__label__', '')
        confidence = predictions[1][0]
        return intent, confidence
    except Exception:
        return "UNKNOWN", 0.0


# =============================
# N·ªôi dung ph·∫£n h·ªìi ng∆∞·ªùi d√πng
# =============================
def get_action(intent, text=""):
    actions = {
        "WELCOME": """Ch√†o b·∫°n nha! üëã 
        T√¥i c√≥ th·ªÉ gi√∫p b·∫°n c√°c vi·ªác sau:
        üìä **Xem l∆∞∆°ng** - Xem b·∫£ng l∆∞∆°ng c√° nh√¢n
        üìÖ **Xem ch·∫•m c√¥ng** - Xem th√¥ng tin ch·∫•m c√¥ng
        üë§ **Xem th√¥ng tin c√° nh√¢n** - Xem h·ªì s∆° c√° nh√¢n
        üìã **Xem ng√†y ngh·ªâ** - Xem th√¥ng tin ngh·ªâ ph√©p

        üí° **V√≠ d·ª• c√°ch h·ªèi:**
        - "Cho t√¥i xem l∆∞∆°ng th√°ng n√†y"
        - "Xem ch·∫•m c√¥ng t·ª´ 1/10 ƒë·∫øn 31/10"  
        - "Hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n"
        - "Ch·∫•m c√¥ng th√°ng tr∆∞·ªõc"

        H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn g√¨ nh√©! üòä""",
        
        "HELP_INFORMATION": """Xin ch√†o, t√¥i l√† TimeAI! ü§ñ
        T√¥i c√≥ th·ªÉ gi√∫p b·∫°n nh·ªØng th√¥ng tin:
        ‚Ä¢ üìã **Th√¥ng tin c√° nh√¢n** - H·ªç t√™n, m√£ NV, ph√≤ng ban, ch·ª©c v·ª•
        ‚Ä¢ üìÖ **Th√¥ng tin ng√†y c√¥ng** - Ch·∫•m c√¥ng, gi·ªù l√†m, tƒÉng ca  
        ‚Ä¢ üèñÔ∏è **Th√¥ng tin ng√†y ngh·ªâ** - Ph√©p nƒÉm, ng√†y v·∫Øng
        ‚Ä¢ üí∞ **Th√¥ng tin l∆∞∆°ng th√°ng** - B·∫£ng l∆∞∆°ng, thu nh·∫≠p

        B·∫°n mu·ªën xem th√¥ng tin n√†o?""",
        
        "HELP_PERSONAL": """T√¥i c√≥ th·ªÉ h·ªó tr·ª£ th√¥ng tin li√™n quan ƒë·∫øn th√¥ng tin c√° nh√¢n c·ªßa b·∫°n: 
        ‚Ä¢ üë§ H·ªç t√™n
        ‚Ä¢ üî¢ M√£ nh√¢n vi√™n  
        ‚Ä¢ üè¢ Ph√≤ng ban
        ‚Ä¢ üíº Ch·ª©c v·ª•
        ‚Ä¢ üìù C√¥ng vi·ªác

        B·∫°n mu·ªën xem th√¥ng tin c·ª• th·ªÉ n√†o?""",
        
        "NGAYCONG_MON": """V√¢ng, ƒë√¢y l√† d·ªØ li·ªáu ch·∫•m c√¥ng c·ªßa b·∫°n t·ª´ ƒë·∫ßu th√°ng ƒë·∫øn h√¥m nay:

    üìä **B·∫£ng ch·∫•m c√¥ng th√°ng 10/2025**
        Ng√†y l√†m vi·ªác Ca l√†m vi·ªác Gi·ªù v√†o Gi·ªù ra Gi·ªù l√†m Gi·ªù tƒÉng ca Lo·∫°i v·∫Øng S·ªë gi·ªù v·∫Øng
        05/10/2025 08:00-17:00 08:00 17:40 8 0 - -
        06/10/2025 08:00-17:00 07:55 18:30 8 1 - -
        07/10/2025 08:00-17:00 - - - - Ph√©p nƒÉm 8""",
    "NGAYCONG_TODAY": f"""V√¢ng, ƒë√¢y l√† d·ªØ li·ªáu ch·∫•m c√¥ng c·ªßa b·∫°n ng√†y h√¥m nay:

        üìÖ **Ng√†y l√†m vi·ªác**: {datetime.now().strftime('%d/%m/%Y')} 
        ‚è∞ **Ca l√†m vi·ªác**: 08:00 - 17:00 (ngh·ªâ tr∆∞a 12:00-13:00)
        üü¢ **Gi·ªù v√†o**: 08:10  
        üî¥ **Gi·ªù ra**: Ch∆∞a c√≥
        üí° **Tr·∫°ng th√°i**: ƒêang l√†m vi·ªác""",
                
        "NGAYCONG_YESTERDAY": """V√¢ng, ƒë√¢y l√† d·ªØ li·ªáu ch·∫•m c√¥ng c·ªßa b·∫°n ng√†y h√¥m qua:

        üìÖ **Ng√†y l√†m vi·ªác**: 19/10/2025 (Th·ª© 4)
        ‚è∞ **Ca l√†m vi·ªác**: 08:00 - 17:00 (ngh·ªâ tr∆∞a 12:00-13:00)
        üü¢ **Gi·ªù v√†o**: 08:15 (Tr·ªÖ 15 ph√∫t)
        üî¥ **Gi·ªù ra**: 17:10
        ‚è±Ô∏è **Gi·ªù l√†m vi·ªác**: 7.5
        üåô **Gi·ªù tƒÉng ca th·ª±c t·∫ø**: 2
        ‚úÖ **Gi·ªù tƒÉng ca ƒë∆∞·ª£c duy·ªát**: 2
        ‚ùå **Gi·ªù v·∫Øng**: Kh√¥ng c√≥
        üìã **Lo·∫°i v·∫Øng**: Kh√¥ng c√≥""",
        
        "NGAYCONG_FROMTO": """V√¢ng, ƒë√¢y l√† d·ªØ li·ªáu ch·∫•m c√¥ng c·ªßa b·∫°n t·ª´ ng√†y 05/10/2025 ƒë·∫øn 30/10/2025:

    üìä **B·∫£ng ch·∫•m c√¥ng**
        Ng√†y l√†m vi·ªác Ca l√†m vi·ªác Gi·ªù v√†o Gi·ªù ra Gi·ªù l√†m Gi·ªù tƒÉng ca Lo·∫°i v·∫Øng S·ªë gi·ªù v·∫Øng
        05/10/2025 08:00-17:00 08:00 17:40 8 0 - -
        06/10/2025 08:00-17:00 07:55 18:30 8 1 - -
        07/10/2025 08:00-17:00 - - - - Ph√©p nƒÉm 8
        ... (c√°c ng√†y kh√°c)

""","NGAYPHEPNAM_YEAR": """V√¢ng, ƒë√¢y l√† d·ªØ li·ªáu chi ti·∫øt v·ªÅ ng√†y ngh·ªâ ph√©p nƒÉm c·ªßa b·∫°n:

    üìã **Ph√©p nƒÉm ƒë√£ s·ª≠ d·ª•ng:**
        ‚Ä¢ üìÖ 05/01/2025 : 8 gi·ªù
        ‚Ä¢ üìÖ 12/02/2025 : 4 gi·ªù  
        ‚Ä¢ üìÖ 25/04/2025 : 8 gi·ªù

    üìä **T·ªïng k·∫øt:**
        ‚Ä¢ ‚úÖ T·ªïng ƒë√£ ngh·ªâ ph√©p nƒÉm: 20 gi·ªù
        ‚Ä¢ üéØ Ph√©p nƒÉm c√≤n l·∫°i: 2 ng√†y (16 gi·ªù)""",
        
        "NGAYPHEPNAM_FROMTO": """V√¢ng, ƒë√¢y l√† d·ªØ li·ªáu chi ti·∫øt v·ªÅ ng√†y ngh·ªâ ph√©p nƒÉm t·ª´ ng√†y 01/05/2025 ƒë·∫øn 30/10/2025 c·ªßa b·∫°n:

    üìã **Ph√©p nƒÉm trong kho·∫£ng th·ªùi gian:**
        ‚Ä¢ üìÖ 05/01/2025 : 8 gi·ªù
        ‚Ä¢ üìÖ 12/02/2025 : 4 gi·ªù
        ‚Ä¢ üìÖ 25/04/2025 : 8 gi·ªù

    üìä **T·ªïng k·∫øt:**
        ‚Ä¢ ‚úÖ T·ªïng ƒë√£ ngh·ªâ ph√©p nƒÉm: 20 gi·ªù
        ‚Ä¢ üéØ Ph√©p nƒÉm c√≤n l·∫°i: 2 ng√†y (16 gi·ªù)""",
        
        "NGAYNGHI_YEAR": """V√¢ng, ƒë√¢y l√† d·ªØ li·ªáu ng√†y ngh·ªâ c·ªßa b·∫°n tr√™n h·ªá th·ªëng ghi nh·∫≠n t·ª´ ƒë·∫ßu nƒÉm ƒë·∫øn nay:

    üìä **B·∫£ng ng√†y ngh·ªâ**
        Ng√†y l√†m vi·ªác Ca l√†m vi·ªác Lo·∫°i v·∫Øng S·ªë gi·ªù v·∫Øng
        05/10/2025 08:00-17:00 Ph√©p nƒÉm 8
        06/10/2025 08:00-17:00 Kh√¥ng ph√©p 8
        07/10/2025 08:00-17:00 Ph√©p nƒÉm 4

"""}
    return actions.get(intent, "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. H√£y th·ª≠ l·∫°i nh√©! üòä")


# =============================
# Demo CLI
# =============================
if __name__ == "__main__":
    print("ü§ñ TimeAI Assistant - Nh·∫≠p 'quit' ƒë·ªÉ tho√°t\n")
    print(get_action("WELCOME"))
    print()
    
    while True:
        user_input = input("üë§ B·∫°n: ").strip()
        
        if user_input.lower() in ['quit', 'exit', 'tho√°t']:
            print("üëã H·∫πn g·∫∑p l·∫°i b·∫°n!")
            break
        
        res = build_response_with_time(user_input)
        print("\nü§ñ Bot:")
        print(f"- Intent: {res['intent']} (ƒê·ªô tin c·∫≠y: {res['confidence']:.1%})")
        print(f"- Time parse: {res['time']}")
        print(f"- UI message:\n{res['message']}\n")
        # if user_input:
        #     intent, confidence = predict_intent(user_input)
        #     action = get_action(intent, user_input)
            
        #     print(f"\nü§ñ Bot:")
        #     if intent in ["WELCOME", "HELP_INFORMATION", "HELP_PERSONAL"]:
        #         print(f"Intent: {intent} (ƒê·ªô tin c·∫≠y: {confidence:.1%})")
        #         print(f"D·ªØ li·ªáu m·∫´u m√† data m√¨nh s·∫Ω hi·ªÉn th·ªã l√†:")
        #         print(f"\"\t{action}\"")
        #     else:
        #         print(f"Intent: {intent} (ƒê·ªô tin c·∫≠y: {confidence:.1%})")
        #         print(f"D·ªØ li·ªáu m·∫´u m√† data m√¨nh s·∫Ω hi·ªÉn th·ªã l√†:")
        #         print(f"\"\t{action}\"")
        #     print()